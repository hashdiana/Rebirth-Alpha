//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "G:\PortableSoft\JBY\MC_Deobf3000\1.12-MCP-Mappings"!

package me.rebirthclient.mod.modules.impl.exploit;

import com.mojang.authlib.GameProfile;
import java.util.ArrayList;
import java.util.UUID;
import me.rebirthclient.api.events.impl.PacketEvent;
import me.rebirthclient.mod.modules.Category;
import me.rebirthclient.mod.modules.Module;
import me.rebirthclient.mod.modules.settings.Setting;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.client.CPacketClientStatus;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketTabComplete;
import net.minecraft.world.GameType;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class Blink extends Module {
   public static Blink INSTANCE = new Blink();
   private final ArrayList<Packet> packetsList = new ArrayList();
   private final Setting<Boolean> anyPacket = this.add(new Setting<>("AnyPacket", false));

   public Blink() {
      super("Blink", "Fake lag", Category.EXPLOIT);
      INSTANCE = this;
   }

   @Override
   public void onEnable() {
      if (!fullNullCheck()) {
         this.packetsList.clear();
         EntityOtherPlayerMP player = new EntityOtherPlayerMP(
            mc.world, new GameProfile(UUID.fromString("0f75a81d-70e5-43c5-b892-f33c524284f3"), "Â§aYou")
         );
         player.copyLocationAndAnglesFrom(mc.player);
         player.rotationYawHead = mc.player.rotationYawHead;
         player.rotationYaw = mc.player.rotationYaw;
         player.rotationPitch = mc.player.rotationPitch;
         player.setGameType(GameType.SURVIVAL);
         player.inventory.copyInventory(mc.player.inventory);
         player.setHealth(20.0F);
         mc.world.addEntityToWorld(-123456, player);
         player.onLivingUpdate();
      }
   }

   @Override
   public void onTick() {
      if (mc.player.isDead) {
         this.disable();
      }
   }

   @Override
   public void onLogout() {
      if (this.isOn()) {
         this.disable();
      }
   }

   @Override
   public void onLogin() {
      if (this.isOn()) {
         this.disable();
      }
   }

   @SubscribeEvent
   public void onSendPacket(PacketEvent.Send event) {
      if (!fullNullCheck()) {
         Packet<?> t = event.getPacket();
         if (!(t instanceof CPacketChatMessage)) {
            if (!(t instanceof CPacketConfirmTeleport)) {
               if (!(t instanceof CPacketKeepAlive)) {
                  if (!(t instanceof CPacketTabComplete)) {
                     if (!(t instanceof CPacketClientStatus)) {
                        if (t instanceof CPacketPlayer || this.anyPacket.getValue()) {
                           this.packetsList.add(event.getPacket());
                           event.setCanceled(true);
                        }
                     }
                  }
               }
            }
         }
      }
   }

   @Override
   public void onDisable() {
      if (!fullNullCheck()) {
         mc.world.removeEntityFromWorld(-123456);

         for(Packet packet : this.packetsList) {
            mc.player.connection.sendPacket(packet);
         }
      }
   }

   @Override
   public String getInfo() {
      return String.valueOf(this.packetsList.size());
   }
}
